import argparse
from socket import *
import json

def _argparse():
    parser= argparse.ArgumentParser(description="!!!!!")
    parser.add_argument('--ip', action='store', required=True, dest='ip', help='IP')
    parser.add_argument('--port', action='store', required=True, dest='port', help='PORT')

    return parser.parse_args()

def main():
    parser = _argparse()
    ip = parser.ip
    port = int(parser.port)

    server_port = port
    server_ip = ip
    client_socket = socket(AF_INET, SOCK_STREAM)
    client_socket.bind((server_ip, server_port))

    request=input('request:')
    client_request={'command': request}

    client_socket.send(json.dumps(client_request).encode())
    client_recv=client_socket.recv(20000)
    print(json.loads(client_recv.decode()))

    client_socket.close()

if __name__ == '__main__':
    main()
    
    
    
    
    
    
    
import argparse
import time
from socket import *
import json

def _argparse():
    parser= argparse.ArgumentParser(description="1st trail!!!")
    parser.add_argument('--port', action='store', required=True, dest='port', help='PORT')

    return parser.parse_args()

def get_time():
    return {'command': 'time', 'feedback': time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(time.time()))}

def get_name():
    return {'command': 'name', 'feedback':'Alice'}

prtocol_cammand = {'time': get_time, 'name': get_name}

def main():
    parser=_argparse()
    port= int(parser.port)

    server_port=port
    server_socket = socket(AF_INET, SOCK_STREAM)
    server_socket.bind(('', server_port))
    server_socket.listen(10)

    while True:
        connect_socket, client_address = server_socket.accept()
        json_bin_recv = connect_socket.recv(20000)
        json_recv_dict = json.loads(json_bin_recv.decode())
        if 'command' in json_recv_dict:
            command = json_recv_dict['command']
            if command in prtocol_cammand:
                feedback_msg = prtocol_cammand['command']()
            else:
                feedback_msg = {'command': command, 'feedback': '404'}
        else:
            feedback_msg = {'command': '', 'feedback': '404'}

            connect_socket.send(json.dumps(feedback_msg).encode())



if __name__ == '__main__':
    main()